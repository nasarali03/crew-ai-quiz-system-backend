from crewai import Agent, Task, Crew
from typing import Dict, Any, List
import json
import os
from dotenv import load_dotenv
from app.services.llm_service import LLMService

load_dotenv()

class QuizGeneratorAgent:
    def __init__(self, db):
        self.db = db
        self.llm_service = LLMService()
        
    async def generate_questions(self, quiz) -> Dict[str, Any]:
        """Generate quiz questions using LLM service"""
        
        try:
            print(f"üéØ QuizGenerator: Starting question generation for quiz: {quiz['title']}")
            print(f"üìö Topic: {quiz['topic']}, Difficulty: {quiz['difficulty']}, Questions: {quiz['total_questions']}")
            
            # Use LLM service to generate questions
            questions_data = await self.llm_service.generate_quiz_questions(
                topic=quiz['topic'],
                difficulty=quiz['difficulty'],
                num_questions=quiz['total_questions']
            )
            
            print(f"üìù Received {len(questions_data.get('questions', []))} questions from LLM service")
            
            questions = questions_data.get('questions', [])
            print(f"üìã Questions received from LLM: {len(questions)}")
            
            # Validate questions before saving
            if not questions:
                print("‚ùå No questions received from LLM")
                return {
                    "success": False,
                    "message": "No questions generated by AI",
                    "error": "Empty questions array from LLM"
                }
            
            # Validate question structure
            for i, question in enumerate(questions):
                if not question.get('question_text') or not question.get('options') or not question.get('correct_answer'):
                    print(f"‚ùå Invalid question structure at index {i}: {question}")
                    return {
                        "success": False,
                        "message": "Invalid question structure from LLM",
                        "error": f"Question {i+1} missing required fields"
                    }
            
            print("‚úÖ LLM generated valid questions - proceeding to save to database")
            
            # Save questions to database ONLY if LLM succeeded
            from app.services.firebase_service import FirebaseService
            firebase_service = FirebaseService(self.db)
            
            saved_questions = []
            for i, question_data in enumerate(questions):
                print(f"üíæ Saving question {i+1}: {question_data.get('question_text', 'No text')[:50]}...")
                
                question_dict = {
                    "quiz_id": quiz['id'],
                    "question_text": question_data['question_text'],
                    "options": question_data['options'],
                    "correct_answer": question_data['correct_answer'],
                    "time_limit": quiz['time_per_question'],
                    "order": i + 1
                }
                
                try:
                    question = await firebase_service.create_question(question_dict)
                    saved_questions.append(question)
                    print(f"‚úÖ Question {i+1} saved successfully")
                except Exception as e:
                    print(f"‚ùå Failed to save question {i+1}: {e}")
                    # If any question fails to save, rollback all saved questions
                    print("üîÑ Rolling back saved questions due to save failure")
                    for saved_question in saved_questions:
                        try:
                            # Delete the saved question
                            firebase_service.db.collection('questions').document(saved_question['id']).delete()
                            print(f"üóëÔ∏è Deleted question {saved_question['id']}")
                        except Exception as delete_error:
                            print(f"‚ùå Failed to delete question {saved_question['id']}: {delete_error}")
                    
                    return {
                        "success": False,
                        "message": f"Failed to save questions to database: {str(e)}",
                        "error": str(e)
                    }
            
            print(f"‚úÖ Successfully saved {len(saved_questions)} questions to database")
            
            return {
                "success": True,
                "message": f"Generated {len(saved_questions)} questions using LLM",
                "questions_count": len(saved_questions),
                "quiz_id": quiz['id']
            }
            
        except Exception as e:
            print(f"‚ùå QuizGenerator: LLM failed to generate questions: {str(e)}")
            print("üö´ NO QUESTIONS WILL BE SAVED TO DATABASE")
            return {
                "success": False,
                "message": f"LLM failed to generate questions: {str(e)}",
                "error": str(e)
            }
